#include <iostream>
#include <string>
#include "SymbolTable.h"
#include "SymbolFactory.h"
#include "BaseType.h"

COMPILER MIEC
	SymbolTable _symTab;
	SymbolFactory _symFactory;
 

CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.
    
TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.
  Integer = "Integer".
  semicolon = ';'.
  colon     = ':'.
  lpar      = '('.
  rpar      = ')'.
    
COMMENTS FROM "(*" TO "*)" NESTED
  
IGNORE cr + lf + tab


PRODUCTIONS

MIEC = "PROGRAM" ident 
	   [VarDecl] 
	   "BEGIN" 
	     Statements 
	   "END".

VarDecl = "BEGIN_VAR"		(.	size_t offset = 0; .)
		    SingleVarDecl<offset>
			{
			SingleVarDecl<offset>
			}
		  "END_VAR".

SingleVarDecl<size_t& offset> = ident	(.	std::wstring wsIdent = std::wstring(t->val); std::string stringIdent = std::string(wsIdent.begin(), wsIdent.end()); .)
			colon 
			Integer						(.	BaseType* intType = new BaseType(BaseTypeName::INT); 
											offset += intType->GetSize();
											std::string typeSymbolName = "Integer";
											if (_symTab.Find(typeSymbolName) == nullptr)
											{
												_symTab.Add(_symFactory.CreateTypeSymbol(typeSymbolName, intType));
											} .)
			semicolon					(.	if (_symTab.Find(stringIdent) == nullptr)
											{
												_symTab.Add(_symFactory.CreateVarSymbol(stringIdent, intType, offset));
											}
											else
											{
												std::wstring errorMessage = L"Symbol ";
												errorMessage += wsIdent;
												errorMessage += L" is already defined";
												SemErr(errorMessage.c_str());
											} .)
			.
		
Statements = Stat {Stat}.
Stat = ident ":=" Expr semicolon
	   | "print" lpar Expr rpar semicolon
	   | "WHILE" Condition "DO" Statements "END"
	   | "IF" Condition "THEN" Statements ("END" | "ELSE" Statements "END").

Expr = Term {("+" | "-") Term}.
	   
Term = Fact {("*" | "/") Fact}.

Fact = ident
	   | number
	   | lpar Expr rpar.

Condition = Expr Relop Expr.		  

Relop = "=" | "<=" | ">=" | "!=" | "<" | ">".


END MIEC .